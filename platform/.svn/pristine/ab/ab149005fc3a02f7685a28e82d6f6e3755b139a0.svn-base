package cc.ywxm.dao.impl;

import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.BatchPreparedStatementSetter;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.orm.hibernate3.HibernateTemplate;
import org.springframework.stereotype.Repository;

import cc.ywxm.action.Pageable;
import cc.ywxm.dao.LetterDao;
import cc.ywxm.model.LetterInbox;
import cc.ywxm.model.LetterOutbox;
import cc.ywxm.utils.RSMapper;
import cc.ywxm.vo.LetterInboxVo;
import cc.ywxm.vo.LetterOutboxVo;

@Repository
public class LetterDaoImpl implements LetterDao
{
	@Resource
	private HibernateTemplate hibernateTemplate;
	@Resource
	private JdbcTemplate jdbcTemplate;

	public void save(LetterOutbox letter)
	{
		hibernateTemplate.save(letter);
	}

	public List<LetterOutboxVo> findOutboxByPage(String username,
			Pageable pageable)
	{
		String sql = "SELECT t.letter_id, t.subject, t.posttime, t.receiver FROM letter_outbox t WHERE t.poster = ? AND (deleteflag <> 1 or deleteflag IS NULL) ORDER BY t.posttime desc";
		return RSMapper.queryPage(jdbcTemplate, sql, pageable,
				LetterOutboxVo.class, username);
	}

	public boolean batchOutboxDelete(final Long[] letterIds)
	{
		try
		{
			String sql = "UPDATE letter_outbox SET deleteflag = 1 WHERE letter_id = ?";
			jdbcTemplate.batchUpdate(sql, new BatchPreparedStatementSetter()
			{
				public void setValues(PreparedStatement ps, int i)
						throws SQLException
				{
					ps.setLong(1, letterIds[i]);

				}

				public int getBatchSize()
				{
					return letterIds.length;
				}
			});
		} catch (DataAccessException e)
		{
			e.printStackTrace();
			return false;
		}
		return true;
	}

	public void batchInboxDelete(final Long[] letterIds)
	{
		String sql = "UPDATE letter_inbox SET deleteflag = 1 WHERE letter_id = ?";
		jdbcTemplate.batchUpdate(sql, new BatchPreparedStatementSetter()
		{
			public void setValues(PreparedStatement ps, int i)
					throws SQLException
			{
				ps.setLong(1, letterIds[i]);

			}

			public int getBatchSize()
			{
				return letterIds.length;
			}
		});
	}

	public void save(List<LetterInbox> letterInboxes)
	{
		for (int i = 0; i < letterInboxes.size(); i++)
		{
			if (i % 100 == 0)
			{
				hibernateTemplate.flush();
				hibernateTemplate.clear();
			}
			hibernateTemplate.save(letterInboxes.get(i));

		}

	}

	public List<LetterInboxVo> findInboxByPage(String username,
			Pageable pageable)
	{
		String sql = "SELECT t.letter_id, t.subject, t.receivetime, t.poster, t.readflag FROM letter_inbox t WHERE t.receiver = ? AND (deleteflag <> 1 or deleteflag IS NULL) ORDER BY t.receivetime desc";
		return RSMapper.queryPage(jdbcTemplate, sql, pageable,
				LetterInboxVo.class, username);
	}

	public void markInboxAllReaded(String username)
	{
		String sql = "UPDATE letter_inbox SET readflag = 1 WHERE receiver = ?";
		jdbcTemplate.update(sql, new Object[]
		{ username });
	}

	public LetterInbox findInboxById(Long letterId)
	{
		LetterInbox letter;
		try
		{
			letter = (LetterInbox) hibernateTemplate.get(LetterInbox.class,
					letterId);
		} catch (DataAccessException e)
		{
			e.printStackTrace();
			return null;
		}
		return letter;
	}

	public LetterOutbox findOutboxById(Long letterId)
	{
		LetterOutbox letter;
		try
		{
			letter = (LetterOutbox) hibernateTemplate.get(LetterOutbox.class,
					letterId);
		} catch (DataAccessException e)
		{
			e.printStackTrace();
			return null;
		}
		return letter;
	}

	public void inboxDelete(Long letterId)
	{
		String sql = "UPDATE letter_inbox SET deleteflag = 1 WHERE letter_id = ?";
		jdbcTemplate.update(sql, new Object[]
		{ letterId });
	}

	public void outboxDelete(Long letterId)
	{
		String sql = "UPDATE letter_outbox SET deleteflag = 1 WHERE letter_id = ?";
		jdbcTemplate.update(sql, new Object[]
		{ letterId });
	}

	public void markInboxReaded(Long letterId)
	{
		String sql = "UPDATE letter_inbox SET readflag = 1 WHERE letter_id = ?";
		jdbcTemplate.update(sql, new Object[]
		{ letterId });
	}
}
