package cc.ywxm.dao.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.apache.commons.lang.StringUtils;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.orm.hibernate3.HibernateTemplate;
import org.springframework.stereotype.Repository;

import cc.ywxm.dao.GameDao;
import cc.ywxm.model.Game;
import cc.ywxm.model.GameOpen;
import cc.ywxm.utils.Pageable;
import cc.ywxm.utils.RSMapper;
import cc.ywxm.vo.GameVo;

@Repository
public class GameDaoImpl implements GameDao
{
	@Resource
	private HibernateTemplate hibernateTemplate;
	@Resource
	private JdbcTemplate jdbcTemplate;

	@SuppressWarnings("unchecked")
	public List<Game> findAll()
	{
		List<Game> games;
		try
		{
			games = hibernateTemplate.find("from Game order by gameId");
		} catch (DataAccessException e)
		{
			e.printStackTrace();
			return null;
		}
		return games;
	}

	public Game findById(Integer gameId)
	{
		Game game;
		try
		{
			game = (Game)hibernateTemplate.get(Game.class, gameId);
		} catch (DataAccessException e)
		{
			e.printStackTrace();
			return null;
		}
		return game;
	}

	public void update(Game game)
	{
		hibernateTemplate.update(game);

	}

	public void save(Game game)
	{
		hibernateTemplate.save(game);
	}

	public List<Game> find(Game condition)
	{
		return null;
	}

	@SuppressWarnings("unchecked")
	public List<GameOpen> findAllGameOpen()
	{
		List<GameOpen> gameOpens;
		try
		{
			gameOpens = hibernateTemplate.find("from GameOpen");
		} catch (DataAccessException e)
		{
			e.printStackTrace();
			return null;
		}
		return gameOpens;
	}

	public List<GameVo> findByPage(GameVo condition, Pageable pageable)
	{
		String sql = "SELECT t.game_id, t.gamename, game_url FROM  game t WHERE 1 = 1";
		if (condition != null)
		{
			List<Object> args = new ArrayList<Object>();
			if (StringUtils.isNotEmpty(condition.getGamename()))
			{
				sql += " AND t.gamename like ?";
				args.add("%" + condition.getGamename() + "%");

			}
			sql += " ORDER BY t.game_id desc";
			return RSMapper.queryPage(jdbcTemplate, sql, pageable,
					GameVo.class, args.toArray());
		} else
		{
			sql += " ORDER BY t.game_id desc";
			return RSMapper
					.queryPage(jdbcTemplate, sql, pageable, GameVo.class);
		}
	}

	public boolean add(Game game)
	{
		Object o = null;
		try
		{
			o = hibernateTemplate.save(game);
			if (o == null)
			{
				return false;
			} else
			{
				return true;
			}
		} catch (DataAccessException e)
		{
			e.printStackTrace();
			return false;
		}

	}

	public void delete(Game game)
	{
		hibernateTemplate.delete(game);
	}

}
