package cc.ywxm.service.impl.game;

import java.util.HashMap;
import java.util.Map;

import javax.annotation.Resource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import cc.ywxm.dao.game.BaseInfoDao;
import cc.ywxm.model.game.BaseInfo;
import cc.ywxm.service.game.BaseInfoService;

@Transactional
@Service
public class BaseInfoServiceImpl implements BaseInfoService
{
	private Logger log = LoggerFactory.getLogger(this.getClass());
	@Resource
	private BaseInfoDao baseInfoDao;

	public Map<String, Object> gets(Integer rows, Integer page, String nickname)
	{
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("rows", baseInfoDao.list(rows, page, nickname));
		map.put("total", baseInfoDao.count(nickname));
		return map;
	}

	public Map<String, Object> gets(Integer rows, Integer page, String sort,
			String order, String nickname)
	{
		if (nickname == null)
		{
			nickname = "";
		} else
		{
			nickname = nickname.trim();
		}
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("rows", baseInfoDao.list(rows, page, sort, order, nickname));
		map.put("total", baseInfoDao.count(nickname));
		return map;
	}

	public int add(String nickname, Integer sex)
	{
		if (nickname == null || "".equals(nickname))
		{
			return 2;// 昵称为空
		}
		boolean b = true;
		try
		{
			b = baseInfoDao.nicknameExist(nickname);
		} catch (Exception e2)
		{
			e2.printStackTrace();
			return 0;// 未知错误
		}
		if (b)
		{
			return 3;// 昵称重复
		}
		int player = 0;
		try
		{
			player = baseInfoDao.maxId();
		} catch (Exception e1)
		{
			e1.printStackTrace();
			return 0;// 未知错误
		}
		BaseInfo baseInfo = new BaseInfo();
		baseInfo.setPlayer(++player);
		baseInfo.setNickname(nickname);
		baseInfo.setSex(sex + "");
		try
		{
			baseInfoDao.save(baseInfo);
			return 1;// 创建成功
		} catch (Exception e)
		{
			e.printStackTrace();
			return 0;// 未知错误
		}

	}

	public int edit(String player, Integer gold, Double silver, Integer exp,
			Integer energy, Integer feat, Integer prestige, Integer mobility,
			Integer level, Integer progress)
	{
		if (player == null || player.trim().equals(""))
		{
			return CODE_PLAYER_NULL;
		}
		int id = 0;
		try
		{
			id = Integer.parseInt(player);
		} catch (NumberFormatException e)
		{
			try
			{
				id = baseInfoDao.findPlayerByNickname(player);
			} catch (Exception exc)
			{
				log.error(exc.getMessage());
				return CODE_PLAYER_NOT_EXIST;
			}
		}
		try
		{
			baseInfoDao.update(id, gold, silver, exp, energy.shortValue(),
					feat, prestige, mobility.shortValue(), level.shortValue(),
					progress.shortValue());
			return CODE_SUCCESS;
		} catch (Exception e)
		{
			log.error(e.getMessage());
			return CODE_FAIL;
		}
	}

}
