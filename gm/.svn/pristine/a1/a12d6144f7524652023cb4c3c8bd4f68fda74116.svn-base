package cc.ywxm.service.impl.game;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.supercsv.cellprocessor.constraint.UniqueHashCode;
import org.supercsv.cellprocessor.ift.CellProcessor;
import org.supercsv.io.CsvMapReader;
import org.supercsv.io.ICsvMapReader;
import org.supercsv.prefs.CsvPreference;

import cc.ywxm.constant.Const;
import cc.ywxm.dao.game.BaseInfoDao;
import cc.ywxm.service.game.KickService;
import cc.ywxm.utils.ZMQutils;

@Transactional
@Service
public class KickServiceImpl implements KickService
{

	private Logger log = LoggerFactory.getLogger(this.getClass());
	@Resource
	private BaseInfoDao baseInfoDao;

	private List<Map<String, Object>> readCsv(File csvFile) throws Exception
	{
		List<Map<String, Object>> result = new ArrayList<Map<String, Object>>();
		File file = csvFile;
		ICsvMapReader mapReader = null;
		try
		{
			log.debug("系统文件编码：" + System.getProperty("file.encoding"));
			// 强制使用GBK文件编码，而不采用系统默认文件编码，因兼容windows系统
			mapReader = new CsvMapReader(new InputStreamReader(
					new FileInputStream(file), "GBK"),
					CsvPreference.EXCEL_PREFERENCE);
			// skip the header
			final String[] header = mapReader.getHeader(true);
			// for (int i = 0; i < header.length; i++)
			// {
			// log.debug(header[i]);
			// }
			final CellProcessor[] processors = getProcessors();

			Map<String, Object> map;
			while ((map = mapReader.read(header, processors)) != null)
			{
				result.add(map);
			}

		} finally
		{
			if (mapReader != null)
			{
				mapReader.close();
			}
		}
		return result;// 操作成功
	}

	/**
	 * Sets up the processors used for the examples. There are 10 CSV columns,
	 * so 10 processors are defined. Empty columns are read as null (hence the
	 * NotNull() for mandatory columns).
	 * 
	 * @return the cell processors
	 */
	private static CellProcessor[] getProcessors()
	{

		// final String emailRegex = "[a-z0-9\\._]+@[a-z0-9\\.]+"; // just an
		// example, not
		// very robust!
		// StrRegEx.registerMessage(emailRegex,
		// "must be a valid email address");

		final CellProcessor[] processors = new CellProcessor[]
		{ new UniqueHashCode() // customerNo (must be unique)
		// new NotNull(), // firstName
		// new NotNull(), // lastName
		// new ParseDate("dd/MM/yyyy"), // birthDate
		// new NotNull(), // mailingAddress
		// new Optional(new ParseBool()), // married
		// new Optional(new ParseInt()), // numberOfKids
		// new NotNull(), // favouriteQuote
		// new StrRegEx(emailRegex), // email
		// new LMinMax(0L, LMinMax.MAX_LONG) // loyaltyPoints
		};

		return processors;
	}

	// public List<String> readTxt(File txtFile)
	// {
	// List<String> result = new ArrayList<String>();
	// File file = txtFile;
	// try
	// {
	// FileInputStream inStream = new FileInputStream(file);
	// InputStreamReader reader = new InputStreamReader(inStream);
	// BufferedReader bufferedReader = new BufferedReader(reader);
	// StringBuffer sb = new StringBuffer();
	// String line = "";
	// while ((line = bufferedReader.readLine()) != null)
	// {
	// line = line.replace(" ", "");
	// sb.append(line);
	// }
	// String dataString = sb.toString();
	// String[] strs = dataString.split(",");
	// List<Integer> dataList = new ArrayList<Integer>();
	// for (String string : strs)
	// {
	// if (string == null || "".equals(string))
	// {
	// continue;
	// }
	// Integer player = Integer.parseInt(string);
	// if (dataList.contains(player))
	// {
	// continue;
	// }
	// dataList.add(player);
	// }
	// for (Integer data : dataList)
	// {
	// System.out.println(data);
	// }
	// return 1;// 操作成功
	// } catch (FileNotFoundException e)
	// {
	// e.printStackTrace();
	// } catch (IOException e)
	// {
	// e.printStackTrace();
	// } catch (NumberFormatException e)
	// {
	// // e.printStackTrace();
	// return 2;// 存在无效玩家ID
	// }
	// return 0;
	// }

	public int kick(File file, String extension)
	{
		if (file == null)
		{
			return CODE_FILE_NULL;
		}
		if ("csv".equals(extension))
		{
			try
			{
				List<Map<String, Object>> data = readCsv(file);
				System.out.println(String.format("data=%s", data));
				List<Integer> players = new ArrayList<Integer>();
				for (Map<String, Object> map : data)
				{
					Object o = map.get("玩家ID");
					players.add(Integer.parseInt((String) o));
				}
				for (Integer player : players)
				{
					ZMQutils.callNoReturn(player, Const.GM_KICK, 0, "{}");
				}
			} catch (Exception e)
			{
				e.printStackTrace();
				log.error(e.getMessage());
				return CODE_FAIL;
			}
			return CODE_SUCCESS;
		} else
		{
			return CODE_FILEEXT_NOT_SUPPORT;
		}
	}

	public int kick(String player)
	{
		if (player == null || player.trim().equals(""))
		{
			return CODE_PLAYER_NULL;
		}
		int player_ = 0;
		try
		{
			player_ = Integer.parseInt(player);
			if (player_ < 0)
			{
				return CODE_FAIL;
			}
		} catch (NumberFormatException e)
		{
			try
			{
				player_ = baseInfoDao.findPlayerByNickname(player);
			} catch (Exception exc)
			{
				log.error(exc.getMessage());
				return CODE_PLAYER_NOT_EXIST;
			}
		}
		try
		{
			ZMQutils.callNoReturn(player_, Const.GM_KICK, 0, "{}");
			return CODE_SUCCESS;
		} catch (IOException e)
		{
			log.error(e.getMessage());
			return CODE_FAIL;
		}

	}

	public int kick()
	{
		try
		{
			ZMQutils.callNoReturn(-1, Const.GM_KICK, 0, "{}");
			return CODE_SUCCESS;
		} catch (IOException e)
		{
			log.error(e.getMessage());
			return CODE_FAIL;
		}
	}

}
